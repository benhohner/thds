@use 'sass:map';

// Utilities ======================================================
// Type checking
@function is-number($value) {
  @return type-of($value) == "number";
}

@function is-time($value) {
  @return is-number($value) and index("ms" "s", unit($value)) != null;
}

@function is-duration($value) {
  @return is-time($value);
}

@function is-angle($value) {
  @return is-number($value) and index("deg" "rad" "grad" "turn", unit($value)) != null;
}

@function is-frequency($value) {
  @return is-number($value) and index("Hz" "kHz", unit($value)) != null;
}

@function is-integer($value) {
  @return is-number($value) and round($value) == $value;
}

@function is-relative-length($value) {
  @return is-number($value) and index("em" "ex" "ch" "rem" "vw" "vh" "vmin" "vmax", unit($value)) != null;
}

@function is-absolute-length($value) {
  @return is-number($value) and index("cm" "mm" "in" "px" "pt" "pc", unit($value)) != null;
}

@function is-percentage($value) {
  @return is-number($value) and unit($value) == "%";
}

@function is-length($value) {
  @return is-relative-length($value) or is-absolute-length($value);
}

@function is-resolution($value) {
  @return is-number($value) and index("dpi" "dpcm" "dppx", unit($value)) != null;
}

@function is-position($value) {
  @return is-length($value) or is-percentage($value) or index("top" "right" "bottom" "left" "center", $value) != null;
}

// Strip units
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

// Unit conversion
@function px-to-rem($px, $base-font-size: 16px) {
  @return ($px / $base-font-size) * 1rem;
}

@function rem-to-px($rem, $base-font-size: 16px) {
  @return ($rem / 1rem) * $base-font-size;
}


// Map utilities
@function map-get-default($map, $key, $default: null) {
  $value: map.get($map, $key);
  @if not $value {
    $value: $default;
  }
  @return $value;
}

@mixin map-to-properties($map) {
  @each $name, $value in $map {
    #{$name}: $value;
  }
}


// Media Queries ==================================================

// Respond
// Features
@mixin _respond($conditions, $feature, $condition, $scrollbar-compensation: 17px) {
  // A map of all features (min-width, max-width, orientation, resolution, etc.).
  $features: (
    "above": min-width,
    "below": max-width,
    "min-width": min-width,
    "max-width": max-width
  );

  $feature-value: map-get-default($features, $feature, $feature);
  $condition-value: map-get-default($conditions, $condition, $condition);

  // Compensate for scrollbars not being included in screen width in chrome and firefox for windows
  @if is-absolute-length($condition-value) {
    $condition-value: $condition-value + $scrollbar-compensation;
  } @else if is-length($condition-value) {
    @warn "Respond: Scrollbar compensation not possible if not using absolute units (px, etc.).";
  }

  // Prevent media query overlap
  @if $feature-value == 'max-width' and is-length($condition-value) {
    $condition-value: $condition-value - 0.00001;
  }

  @media ($feature-value: $condition-value) {
    @content;
  }
}

$breakpoints: (
    'oxy-xl': 1160px,
    'oxy-l': 992px,
    'oxy-m': 768px,
    'oxy-s': 480px,
    'sm': 320px,
    'md': 672px,
    'lg': 1056px,
    'xlg': 1312px,
    'max': 1584px,
  ) !default;

@mixin respond($feature, $condition, $scrollbar-compensation: 17px) {
  // A map of all conditions (breakpoints, resolutions, or other).
  $conditions: $breakpoints;

  @include _respond($conditions, $feature, $condition, $scrollbar-compensation) {
    @content;
  };  
}